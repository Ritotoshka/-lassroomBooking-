<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Cuemon.Data</name>
    </assembly>
    <members>
        <member name="T:Cuemon.Data.BulkCopyDataReader">
            <summary>
            Provides a way of copying an existing object implementing the <see cref="T:System.Data.Common.DbDataReader"/> class to a filtered forward-only stream of rows that is mapped for bulk upload. This class cannot be inherited.
            </summary>
        </member>
        <member name="M:Cuemon.Data.BulkCopyDataReader.#ctor(System.Data.Common.DbDataReader,System.Collections.Generic.IEnumerable{Cuemon.Mapping})">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Data.BulkCopyDataReader"/> class.
            </summary>
            <param name="reader">The <see cref="T:System.Data.Common.DbDataReader"/> object that contains the data.</param>
            <param name="mappings">A sequence of <see cref="T:Cuemon.Mapping"/> elements that specifies the data to be copied.</param>
        </member>
        <member name="P:Cuemon.Data.BulkCopyDataReader.Mappings">
            <summary>
            Gets the sequence of <see cref="T:Cuemon.Mapping"/> elements that specifies the data to be copied.
            </summary>
            <value>The <see cref="T:Cuemon.Mapping"/> elements that specifies the data to be copied.</value>
        </member>
        <member name="P:Cuemon.Data.BulkCopyDataReader.Item(System.String)">
            <summary>
            Gets the column with the specified name.
            </summary>
            <param name="name">The name of the column to find.</param>
            <returns>The column with the specified name as an <see cref="T:System.Object"/>.</returns>
        </member>
        <member name="P:Cuemon.Data.BulkCopyDataReader.Item(System.Int32)">
            <summary>
            Gets the column located at the specified index.
            </summary>
            <param name="i">The zero-based index of the column to get.</param>
            <returns>The column located at the specified index as an <see cref="T:System.Object"/>.</returns>
        </member>
        <member name="P:Cuemon.Data.BulkCopyDataReader.RecordsAffected">
            <summary>
            Gets the number of rows changed, inserted, or deleted by execution of the SQL statement.
            </summary>
            <value>The records affected.</value>
        </member>
        <member name="P:Cuemon.Data.BulkCopyDataReader.HasRows">
            <summary>
            Gets a value that indicates whether this <see cref="T:System.Data.Common.DbDataReader" /> contains one or more rows.
            </summary>
            <value><c>true</c> if this instance has rows; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Cuemon.Data.BulkCopyDataReader.IsClosed">
            <summary>
            Gets a value indicating whether the data reader is closed.
            </summary>
            <value><c>true</c> if this instance is closed; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Cuemon.Data.BulkCopyDataReader.RowCount">
            <summary>
            Gets the currently processed row count of this instance.
            </summary>
            <value>The currently processed row count of this instance.</value>
            <remarks>This property is incremented when the invoked <see cref="M:Cuemon.Data.BulkCopyDataReader.Read"/> method returns <c>true</c>.</remarks>
        </member>
        <member name="P:Cuemon.Data.BulkCopyDataReader.FieldCount">
            <summary>
            Gets the number of columns in the current row.
            </summary>
            <value>When not positioned in a valid recordset, 0; otherwise, the number of columns in the current record.</value>
        </member>
        <member name="M:Cuemon.Data.BulkCopyDataReader.Read">
            <summary>
            Advances the <see cref="T:System.Data.DbDataReader" /> to the next record.
            </summary>
            <returns><c>true</c> if there are more rows; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Cuemon.Data.BulkCopyDataReader.GetBoolean(System.Int32)">
            <summary>
            Gets the value of the specified column as a Boolean.
            </summary>
            <param name="ordinal">The zero-based column ordinal.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:Cuemon.Data.BulkCopyDataReader.GetByte(System.Int32)">
            <summary>
            Gets the 8-bit unsigned integer value of the specified column.
            </summary>
            <param name="ordinal">The zero-based column ordinal.</param>
            <returns>The 8-bit unsigned integer value of the specified column.</returns>
        </member>
        <member name="M:Cuemon.Data.BulkCopyDataReader.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a stream of bytes from the specified column, starting at location indicated by dataOffset, into the buffer, starting at the location indicated by bufferOffset.
            </summary>
            <param name="ordinal">The zero-based column ordinal.</param>
            <param name="dataOffset">The index within the row from which to begin the read operation.</param>
            <param name="buffer">The buffer into which to copy the data.</param>
            <param name="bufferOffset">The index with the buffer to which the data will be copied.</param>
            <param name="length">The maximum number of characters to read.</param>
            <returns>The actual number of bytes read.</returns>
        </member>
        <member name="M:Cuemon.Data.BulkCopyDataReader.GetChar(System.Int32)">
            <summary>
            Gets the character value of the specified column.
            </summary>
            <param name="ordinal">The zero-based column ordinal.</param>
            <returns>The character value of the specified column.</returns>
        </member>
        <member name="M:Cuemon.Data.BulkCopyDataReader.GetDateTime(System.Int32)">
            <summary>
            Gets the date and time data value of the specified field.
            </summary>
            <param name="ordinal">The index of the field to find.</param>
            <returns>The date and time data value of the specified field.</returns>
        </member>
        <member name="M:Cuemon.Data.BulkCopyDataReader.GetDecimal(System.Int32)">
            <summary>
            Gets the fixed-position numeric value of the specified field.
            </summary>
            <param name="ordinal">The index of the field to find.</param>
            <returns>The fixed-position numeric value of the specified field.</returns>
        </member>
        <member name="M:Cuemon.Data.BulkCopyDataReader.GetDouble(System.Int32)">
            <summary>
            Gets the double-precision floating point number of the specified field.
            </summary>
            <param name="ordinal">The index of the field to find.</param>
            <returns>The double-precision floating point number of the specified field.</returns>
        </member>
        <member name="M:Cuemon.Data.BulkCopyDataReader.GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.IEnumerator" /> that can be used to iterate through the rows in the data reader.
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator" /> that can be used to iterate through the rows in the data reader.</returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Cuemon.Data.BulkCopyDataReader.GetFieldType(System.Int32)">
            <summary>
            Gets the <see cref="T:System.Type" /> information corresponding to the type of <see cref="T:System.Object" /> that would be returned from <see cref="M:System.Data.IDataRecord.GetValue(System.Int32)" />.
            </summary>
            <param name="ordinal">The index of the field to find.</param>
            <returns>The <see cref="T:System.Type" /> information corresponding to the type of <see cref="T:System.Object" /> that would be returned from <see cref="M:System.Data.IDataRecord.GetValue(System.Int32)" />.</returns>
        </member>
        <member name="M:Cuemon.Data.BulkCopyDataReader.GetFloat(System.Int32)">
            <summary>
            Gets the single-precision floating point number of the specified field.
            </summary>
            <param name="ordinal">The index of the field to find.</param>
            <returns>The single-precision floating point number of the specified field.</returns>
        </member>
        <member name="M:Cuemon.Data.BulkCopyDataReader.GetGuid(System.Int32)">
            <summary>
            Returns the GUID value of the specified field.
            </summary>
            <param name="ordinal">The index of the field to find.</param>
            <returns>The GUID value of the specified field.</returns>
        </member>
        <member name="M:Cuemon.Data.BulkCopyDataReader.GetInt16(System.Int32)">
            <summary>
            Gets the 16-bit signed integer value of the specified field.
            </summary>
            <param name="ordinal">The index of the field to find.</param>
            <returns>The 16-bit signed integer value of the specified field.</returns>
        </member>
        <member name="M:Cuemon.Data.BulkCopyDataReader.GetInt32(System.Int32)">
            <summary>
            Gets the 32-bit signed integer value of the specified field.
            </summary>
            <param name="ordinal">The index of the field to find.</param>
            <returns>The 32-bit signed integer value of the specified field.</returns>
        </member>
        <member name="M:Cuemon.Data.BulkCopyDataReader.GetInt64(System.Int32)">
            <summary>
            Gets the 64-bit signed integer value of the specified field.
            </summary>
            <param name="ordinal">The index of the field to find.</param>
            <returns>The 64-bit signed integer value of the specified field.</returns>
        </member>
        <member name="M:Cuemon.Data.BulkCopyDataReader.GetName(System.Int32)">
            <summary>
            Gets the name for the field to find.
            </summary>
            <param name="ordinal">The index of the field to find.</param>
            <returns>The name of the field or the empty string (""), if there is no value to return.</returns>
        </member>
        <member name="M:Cuemon.Data.BulkCopyDataReader.GetOrdinal(System.String)">
            <summary>
            Return the index of the named field.
            </summary>
            <param name="name">The name of the field to find.</param>
            <returns>The index of the named field.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="name"/> is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="name"/> is not a valid column name.
            </exception>
        </member>
        <member name="M:Cuemon.Data.BulkCopyDataReader.GetString(System.Int32)">
            <summary>
            Gets the string value of the specified field.
            </summary>
            <param name="ordinal">The index of the field to find.</param>
            <returns>The string value of the specified field.</returns>
        </member>
        <member name="M:Cuemon.Data.BulkCopyDataReader.GetValue(System.Int32)">
            <summary>
            Return the value of the specified field.
            </summary>
            <param name="ordinal">The index of the field to find.</param>
            <returns>The <see cref="T:System.Object" /> which will contain the field value upon return.</returns>
        </member>
        <member name="M:Cuemon.Data.BulkCopyDataReader.IsDBNull(System.Int32)">
            <summary>
            Return whether the specified field is set to null.
            </summary>
            <param name="ordinal">The index of the field to find.</param>
            <returns>true if the specified field is set to null; otherwise, false.</returns>
        </member>
        <member name="M:Cuemon.Data.BulkCopyDataReader.Dispose(System.Boolean)">
            <summary>
            Releases the managed resources used by the <see cref="T:System.Data.Common.DbDataReader" /> and optionally releases the unmanaged resources.
            </summary>
            <param name="disposing">true to release managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="P:Cuemon.Data.BulkCopyDataReader.Depth">
            <summary>
            Gets a value indicating the depth of nesting for the current row.
            </summary>
            <value>The depth of nesting for the current row.</value>
            <remarks>The outermost table has a depth of zero.</remarks>
        </member>
        <member name="M:Cuemon.Data.BulkCopyDataReader.GetValues(System.Object[])">
            <summary>
            Populates an array of objects with the column values of the current record.
            </summary>
            <param name="values">An array of <see cref="T:System.Object" /> to copy the attribute fields into.</param>
            <returns>The number of instances of <see cref="T:System.Object" /> in the array.</returns>
        </member>
        <member name="M:Cuemon.Data.BulkCopyDataReader.NextResult">
            <summary>
            Advances the reader to the next result when reading the results of a batch of statements.
            </summary>
            <returns><c>true</c> if there are more result sets; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Cuemon.Data.BulkCopyDataReader.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)">
            <summary>
            Reads a stream of characters from the specified column, starting at location indicated by dataOffset, into the buffer, starting at the location indicated by bufferOffset.
            </summary>
            <param name="ordinal">The zero-based column ordinal.</param>
            <param name="dataOffset">The index within the row from which to begin the read operation.</param>
            <param name="buffer">The buffer into which to copy the data.</param>
            <param name="bufferOffset">The index with the buffer to which the data will be copied.</param>
            <param name="length">The maximum number of characters to read.</param>
            <returns>The actual number of characters read.</returns>
        </member>
        <member name="M:Cuemon.Data.BulkCopyDataReader.GetDataTypeName(System.Int32)">
            <summary>
            Gets the name of the data type.
            </summary>
            <param name="ordinal">The zero-based column ordinal.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Cuemon.Data.BulkCopyDataReader.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents the current row of this instance.
            </summary>
            <returns>A <see cref="T:System.String" /> that represents the current row of this instance.</returns>
        </member>
        <member name="T:Cuemon.Data.DataAdapter">
            <summary>
            An abstract class representing the actual data binding to a data source.
            </summary>
        </member>
        <member name="M:Cuemon.Data.DataAdapter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Data.DataAdapter"/> class.
            </summary>
        </member>
        <member name="M:Cuemon.Data.DataAdapter.#ctor(Cuemon.Data.DataManager)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Data.DataAdapter"/> class.
            </summary>
            <param name="manager">The data manager as underlying DSL wrapper logic.</param>
        </member>
        <member name="P:Cuemon.Data.DataAdapter.Manager">
            <summary>
            Gets the data manager for this object.
            Please be aware, that you should only use this for custom methods as you will loose event control on Entity classes by using the manager directly.
            </summary>
            <value>A <b><see cref="T:Cuemon.Data.DataManager"/></b> object.</value>
        </member>
        <member name="E:Cuemon.Data.DataAdapter.Deleting">
            <summary>
            Occurs before a Delete operation.
            </summary>
        </member>
        <member name="E:Cuemon.Data.DataAdapter.Deleted">
            <summary>
            Occurs when a Delete operation has completed.
            </summary>
        </member>
        <member name="E:Cuemon.Data.DataAdapter.Inserted">
            <summary>
            Occurs when an Insert operation has completed.
            </summary>
        </member>
        <member name="E:Cuemon.Data.DataAdapter.Inserting">
            <summary>
            Occurs before an Insert operation.
            </summary>
        </member>
        <member name="E:Cuemon.Data.DataAdapter.Selected">
            <summary>
            Occurs when a Select operation has completed.
            </summary>
        </member>
        <member name="E:Cuemon.Data.DataAdapter.Selecting">
            <summary>
            Occurs before a Select operation.
            </summary>
        </member>
        <member name="E:Cuemon.Data.DataAdapter.Updated">
            <summary>
            Occurs when an Update operation has completed.
            </summary>
        </member>
        <member name="E:Cuemon.Data.DataAdapter.Updating">
            <summary>
            Occurs before an Update operation.
            </summary>
        </member>
        <member name="M:Cuemon.Data.DataAdapter.OnDeletedRaised(Cuemon.Data.DataAdapterEventArgs)">
            <summary>
            Raises the <see cref="E:Cuemon.Data.DataAdapter.Deleted"/> event.
            </summary>
            <param name="e">The <see cref="T:Cuemon.Data.DataAdapterEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Cuemon.Data.DataAdapter.OnDeletingRaised(Cuemon.Data.DataAdapterEventArgs)">
            <summary>
            Raises the <see cref="E:Cuemon.Data.DataAdapter.Deleting"/> event.
            </summary>
            <param name="e">The <see cref="T:Cuemon.Data.DataAdapterEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Cuemon.Data.DataAdapter.OnInsertedRaised(Cuemon.Data.DataAdapterEventArgs)">
            <summary>
            Raises the <see cref="E:Cuemon.Data.DataAdapter.Inserted"/> event.
            </summary>
            <param name="e">The <see cref="T:Cuemon.Data.DataAdapterEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Cuemon.Data.DataAdapter.OnInsertingRaised(Cuemon.Data.DataAdapterEventArgs)">
            <summary>
            Raises the <see cref="E:Cuemon.Data.DataAdapter.Inserting"/> event.
            </summary>
            <param name="e">The <see cref="T:Cuemon.Data.DataAdapterEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Cuemon.Data.DataAdapter.OnSelectedRaised(Cuemon.Data.DataAdapterEventArgs)">
            <summary>
            Raises the <see cref="E:Cuemon.Data.DataAdapter.Selected"/> event.
            </summary>
            <param name="e">The <see cref="T:Cuemon.Data.DataAdapterEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Cuemon.Data.DataAdapter.OnSelectingRaised(Cuemon.Data.DataAdapterEventArgs)">
            <summary>
            Raises the <see cref="E:Cuemon.Data.DataAdapter.Selecting"/> event.
            </summary>
            <param name="e">The <see cref="T:Cuemon.Data.DataAdapterEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Cuemon.Data.DataAdapter.OnUpdatedRaised(Cuemon.Data.DataAdapterEventArgs)">
            <summary>
            Raises the <see cref="E:Cuemon.Data.DataAdapter.Updated"/> event.
            </summary>
            <param name="e">The <see cref="T:Cuemon.Data.DataAdapterEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Cuemon.Data.DataAdapter.OnUpdatingRaised(Cuemon.Data.DataAdapterEventArgs)">
            <summary>
            Raises the <see cref="E:Cuemon.Data.DataAdapter.Updating"/> event.
            </summary>
            <param name="e">The <see cref="T:Cuemon.Data.DataAdapterEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Cuemon.Data.DataAdapter.Delete(Cuemon.Data.IDataCommand,System.Data.Common.DbParameter[])">
            <summary>
            Deletes data from a data source.
            </summary>
            <param name="dataCommand">The data command to execute.</param>
            <param name="parameters">The parameters to use in the command.</param>
        </member>
        <member name="M:Cuemon.Data.DataAdapter.Insert(Cuemon.Data.IDataCommand,System.Data.Common.DbParameter[])">
            <summary>
            Inserts data to a data source with default insert action, AffectedRows.
            </summary>
            <param name="dataCommand">The data command to execute.</param>
            <param name="parameters">The parameters to use in the command.</param>
            <returns>A <see cref="T:System.Void"/> object.</returns>
        </member>
        <member name="M:Cuemon.Data.DataAdapter.Insert(Cuemon.Data.IDataCommand,Cuemon.Data.QueryInsertAction,System.Data.Common.DbParameter[])">
            <summary>
            Inserts data to a data source.
            </summary>
            <param name="dataCommand">The data command to execute.</param>
            <param name="action">The insert action you wish to apply.</param>
            <param name="parameters">The parameters to use in the command.</param>
            <returns>A <see cref="T:System.Void"/> object.</returns>
        </member>
        <member name="M:Cuemon.Data.DataAdapter.Select(Cuemon.Data.IDataCommand,System.Data.Common.DbParameter[])">
            <summary>
            Selects data from a data source.
            </summary>
            <param name="dataCommand">The data command to execute.</param>
            <param name="parameters">The parameters to use in the command.</param>
            <returns>An object supporting the <see cref="T:System.Data.Common.DbDataReader"/> interface.</returns>
        </member>
        <member name="M:Cuemon.Data.DataAdapter.Update(Cuemon.Data.IDataCommand,System.Data.Common.DbParameter[])">
            <summary>
            Updates data in the data source.
            </summary>
            <param name="dataCommand">The data command to execute.</param>
            <param name="parameters">The parameters to use in the command.</param>
        </member>
        <member name="M:Cuemon.Data.DataAdapter.ExecuteDelete(Cuemon.Data.IDataCommand,System.Data.Common.DbParameter[])">
            <summary>
            Executes the delete statement for the Delete method.
            </summary>
            <param name="dataCommand">The data command to execute.</param>
            <param name="parameters">The parameters to use in the command.</param>
        </member>
        <member name="M:Cuemon.Data.DataAdapter.ExecuteInsert(Cuemon.Data.IDataCommand,Cuemon.Data.QueryInsertAction,System.Data.Common.DbParameter[])">
            <summary>
            Executes the insert statement for the Insert method.
            </summary>
            <param name="dataCommand">The data command to execute.</param>
            <param name="action">The insert action you wish to apply.</param>
            <param name="parameters">The parameters to use in the command.</param>
            <returns></returns>
        </member>
        <member name="M:Cuemon.Data.DataAdapter.ExecuteSelect(Cuemon.Data.IDataCommand,System.Data.Common.DbParameter[])">
            <summary>
            Executes the select statement for the Select method.
            </summary>
            <param name="dataCommand">The data command to execute.</param>
            <param name="parameters">The parameters to use in the command.</param>
        </member>
        <member name="M:Cuemon.Data.DataAdapter.ExecuteUpdate(Cuemon.Data.IDataCommand,System.Data.Common.DbParameter[])">
            <summary>
            Executes the update statement Update method.
            </summary>
            <param name="dataCommand">The data command.</param>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="T:Cuemon.Data.DataAdapterEventArgs">
            <summary>
            Provides data for <see cref="T:Cuemon.Data.DataAdapter"/> related operations.
            </summary>
        </member>
        <member name="M:Cuemon.Data.DataAdapterEventArgs.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Data.DataAdapterEventArgs"/> class.
            </summary>
        </member>
        <member name="F:Cuemon.Data.DataAdapterEventArgs.Empty">
            <summary>
            Represents an <see cref="T:Cuemon.Data.DataAdapter"/> event with no event data.
            </summary>
        </member>
        <member name="T:Cuemon.Data.DataAdapterException">
            <summary>
            The exception that is thrown when a <see cref="T:Cuemon.Data.DataAdapter"/> operation is in an invalid state.
            </summary>
        </member>
        <member name="M:Cuemon.Data.DataAdapterException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Data.DataAdapterException"/> class.
            </summary>
        </member>
        <member name="M:Cuemon.Data.DataAdapterException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Data.DataAdapterException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Cuemon.Data.DataAdapterException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Data.DataAdapterException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception. If the innerException parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception.</param>
        </member>
        <member name="M:Cuemon.Data.DataAdapterException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Data.DataAdapterException"/> class.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="T:Cuemon.Data.DatabaseDependency">
            <summary>
            Provides a way to monitor any changes occurred to one or more relational data sources while notifying subscribing objects.
            </summary>
            <seealso cref="T:Cuemon.Runtime.Dependency" />
        </member>
        <member name="M:Cuemon.Data.DatabaseDependency.#ctor(System.Lazy{Cuemon.Data.DatabaseWatcher},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Data.DatabaseDependency"/> class.
            </summary>
            <param name="lazyDatabaseWatcher">The <see cref="T:Cuemon.Data.DatabaseWatcher"/> to associate with this dependency.</param>
            <param name="breakTieOnChanged">if set to <c>true</c> all <see cref="T:Cuemon.Data.DatabaseWatcher"/> instances is disassociated with this dependency after first notification of changed.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="lazyDatabaseWatcher"/> cannot be null.
            </exception>
            <remarks>The <see cref="T:Cuemon.Data.DatabaseWatcher"/> initialization is deferred until <see cref="M:Cuemon.Runtime.Dependency.StartAsync"/> is invoked.</remarks>
        </member>
        <member name="M:Cuemon.Data.DatabaseDependency.#ctor(System.Collections.Generic.IEnumerable{System.Lazy{Cuemon.Data.DatabaseWatcher}},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Data.DatabaseDependency"/> class.
            </summary>
            <param name="lazyDatabaseWatchers">The <see cref="T:Cuemon.Data.DatabaseWatcher"/> sequence to associate with this dependency.</param>
            <param name="breakTieOnChanged">if set to <c>true</c> all <see cref="T:Cuemon.Data.DatabaseWatcher"/> instances is disassociated with this dependency after first notification of changed.</param>
            <remarks>The sequence of <see cref="T:Cuemon.Data.DatabaseWatcher"/> initializations is deferred until <see cref="M:Cuemon.Runtime.Dependency.StartAsync"/> is invoked.</remarks>
        </member>
        <member name="T:Cuemon.Data.DatabaseWatcher">
            <summary>
            Provides a watcher implementation designed to monitor and signal changes applied to a relational database by raising the <see cref="E:Cuemon.Runtime.Watcher.Changed"/> event.
            </summary>
            <seealso cref="T:Cuemon.Runtime.Watcher" />
        </member>
        <member name="M:Cuemon.Data.DatabaseWatcher.#ctor(System.Data.IDbConnection,System.Func{System.Data.IDbConnection,System.Data.IDataReader},System.Action{Cuemon.Runtime.WatcherOptions})">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Data.DatabaseWatcher"/> class.
            </summary>
            <param name="connection">The <see cref="T:System.Data.IDbConnection"/> used to connect to a database.</param>
            <param name="readerFactory">The function delegate that will resolve an implementation of an <see cref="T:System.Data.IDataReader"/>.</param>
            <param name="setup">The <see cref="T:Cuemon.Runtime.WatcherOptions" /> which may be configured.</param>
        </member>
        <member name="P:Cuemon.Data.DatabaseWatcher.Connection">
            <summary>
            Gets the <see cref="T:System.Data.IDbConnection"/> of this instance.
            </summary>
            <value>The <see cref="T:System.Data.IDbConnection"/> of this instance.</value>
        </member>
        <member name="P:Cuemon.Data.DatabaseWatcher.ReaderFactory">
            <summary>
            Gets the function delegate that will resolve an implementation of an <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <value>The function delegate that will resolve an implementation of an <see cref="T:System.Data.IDataReader"/>.</value>
        </member>
        <member name="P:Cuemon.Data.DatabaseWatcher.Checksum">
            <summary>
            Gets the checksum that is associated with the query specified in <see cref="P:Cuemon.Data.DatabaseWatcher.ReaderFactory"/>.
            </summary>
            <value>The checksum that is associated with the query specified in <see cref="P:Cuemon.Data.DatabaseWatcher.ReaderFactory"/>.</value>
        </member>
        <member name="M:Cuemon.Data.DatabaseWatcher.HandleSignalingAsync">
            <summary>
            Handles the signaling of this <see cref="T:Cuemon.Data.DatabaseWatcher" />.
            </summary>
            <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="T:Cuemon.Data.DataCommand">
            <summary>
            Represents a Transact-SQL statement or stored procedure to execute against a SQL Server database.
            </summary>
        </member>
        <member name="M:Cuemon.Data.DataCommand.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Data.DataCommand"/> class.
            </summary>
            <param name="text">The command text to execute.</param>
        </member>
        <member name="P:Cuemon.Data.DataCommand.DefaultTimeout">
            <summary>
            Gets or sets the default wait time before terminating the attempt to execute a command and generating an error.
            </summary>
            <value>
            The <see cref="T:System.TimeSpan"/> to wait for the command to execute. Default value is 1 minute and 30 seconds.
            </value>
        </member>
        <member name="P:Cuemon.Data.DataCommand.Text">
            <summary>
            Gets or sets the command text to execute.
            </summary>
            <value>The command text to execute.</value>
        </member>
        <member name="P:Cuemon.Data.DataCommand.Type">
            <summary>
            Gets or sets the command type value to execute.
            </summary>
            <value>The command type value to execute. Default type value is <see cref="F:System.Data.CommandType.Text"/>.</value>
        </member>
        <member name="P:Cuemon.Data.DataCommand.Timeout">
            <summary>
            Gets or sets the wait time before terminating the attempt to execute a command and generating an error.
            </summary>
            <value>The timespan to wait for the command to execute. Default value is 1 minute and 30 seconds.</value>
        </member>
        <member name="T:Cuemon.Data.DataConnection">
            <summary>
            Represents a connection to a database.
            </summary>
        </member>
        <member name="M:Cuemon.Data.DataConnection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Data.DataConnection"/> class.
            </summary>
        </member>
        <member name="M:Cuemon.Data.DataConnection.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Data.DataConnection"/> class.
            </summary>
            <param name="connectionString">The connection string used to establish the connection.</param>
        </member>
        <member name="M:Cuemon.Data.DataConnection.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Data.DataConnection"/> class.
            </summary>
            <param name="database">The database of the connection.</param>
            <param name="address">The address of the connection.</param>
            <param name="userId">The user id of the connection.</param>
            <param name="password">The password of the connection.</param>
            <param name="networkLibrary">The network library of the connection.</param>
        </member>
        <member name="M:Cuemon.Data.DataConnection.#ctor(System.String,System.String,System.String,System.String,System.String,System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Data.DataConnection"/> class.
            </summary>
            <param name="database">The database of the connection.</param>
            <param name="address">The address of the connection.</param>
            <param name="userId">The user id of the connection.</param>
            <param name="password">The password of the connection.</param>
            <param name="networkLibrary">The network library of the connection.</param>
            <param name="timeout">The timespan to wait of the connection to open.</param>
        </member>
        <member name="P:Cuemon.Data.DataConnection.ConnectionString">
            <summary>
            Gets or sets the string used to open the connection.
            </summary>
            <value></value>
            <returns>The connection string used to establish the initial connection. The exact contents of the connection string depend on the specific data source for this connection. The default value is based upon the properties of this class.</returns>
        </member>
        <member name="P:Cuemon.Data.DataConnection.Database">
            <summary>
            Gets or sets the database of the connection.
            </summary>
            <value>The database of the connection.</value>
        </member>
        <member name="P:Cuemon.Data.DataConnection.Address">
            <summary>
            Gets or sets the server address of the connection.
            </summary>
            <value>The server address of the connection.</value>
        </member>
        <member name="P:Cuemon.Data.DataConnection.ConnectionTimeout">
            <summary>
            Gets the time to wait while trying to establish a connection before terminating the attempt and generating an error. Preserved for backward compatibility.
            </summary>
            <returns>The time (in seconds) to wait for a connection to open. The value is taken from the Timeout value, and is default 10 seconds.</returns>
        </member>
        <member name="P:Cuemon.Data.DataConnection.UserId">
            <summary>
            Gets or sets the user id of the connection.
            </summary>
            <value>The user id of the connection.</value>
        </member>
        <member name="P:Cuemon.Data.DataConnection.Password">
            <summary>
            Gets or sets the password of the connection.
            </summary>
            <value>The password of the connection.</value>
        </member>
        <member name="P:Cuemon.Data.DataConnection.NetworkLibrary">
            <summary>
            Gets or sets the network library of the connection.
            </summary>
            <value>The network library of the connection.</value>
        </member>
        <member name="P:Cuemon.Data.DataConnection.Timeout">
            <summary>
            Gets or sets the time to wait while trying to establish a connection before terminating the attempt and generating an error.
            </summary>
            <value>The timespan to wait for a connection to open. The default value is 10 seconds.</value>
        </member>
        <member name="P:Cuemon.Data.DataConnection.State">
            <summary>
            Gets the current state of the connection.
            </summary>
            <value></value>
            <returns>One of the <see cref="T:System.Data.ConnectionState"></see> values.</returns>
        </member>
        <member name="M:Cuemon.Data.DataConnection.GetConnectionString(System.Data.Common.DbConnection)">
            <summary>
            Renders a connection string from objects with the implemented <see cref="T:Cuemon.Data.IDataConnection"/> interface.
            </summary>
            <param name="dataConnection">The data connection interface.</param>
            <returns>A connection string.</returns>
        </member>
        <member name="M:Cuemon.Data.DataConnection.ToString">
            <summary>
            Renders the properties of this class to a connection string (if no "manuel" connectionString has been specified). 
            If ConfigurationElement has been set, values are derived from this object.
            </summary>
            <returns>
            A connection string.
            </returns>
        </member>
        <member name="M:Cuemon.Data.DataConnection.ChangeDatabase(System.String)">
            <summary>
            Changes the current database for an open Connection object.
            </summary>
            <param name="databaseName">The name of the database to use in place of the current database.</param>
        </member>
        <member name="M:Cuemon.Data.DataConnection.Close">
            <summary>
            Closes the connection to the database.
            </summary>
        </member>
        <member name="M:Cuemon.Data.DataConnection.Open">
            <summary>
            Opens a database connection with the settings specified by the ConnectionString property of the provider-specific Connection object.
            </summary>
        </member>
        <member name="T:Cuemon.Data.DataManager">
            <summary>
            The DataManager is an abstract class in the <see cref="N:Cuemon.Data"/> namespace that can be used to implement execute commands of different database providers.
            </summary>
        </member>
        <member name="P:Cuemon.Data.DataManager.ConnectionString">
            <summary>
            Gets the string used to open the connection.
            </summary>
            <value>The connection string used to establish the initial connection. The exact contents of the connection string depend on the specific data source for this connection.</value>
        </member>
        <member name="P:Cuemon.Data.DataManager.DefaultConnectionString">
            <summary>
            Gets or sets the default connection string.
            </summary>
            <value>The default connection string.</value>
        </member>
        <member name="M:Cuemon.Data.DataManager.ParseDbType(System.Data.DbType)">
            <summary>
            Parses and returns a <see cref="T:System.Type"/> equivalent of <paramref name="dbType"/>.
            </summary>
            <param name="dbType">The <see cref="T:System.Data.DbType"/> to parse.</param>
            <returns>A <see cref="T:System.Type"/> equivalent of <paramref name="dbType"/>.</returns>
        </member>
        <member name="M:Cuemon.Data.DataManager.GetReaderColumns(System.Data.Common.DbDataReader)">
            <summary>
            Creates and returns a <see cref="T:System.Collections.Generic.KeyValuePair`2"/> sequence of column names and values resolved from the specified <paramref name="reader"/>.
            </summary>
            <param name="reader">The reader to resolve column names and values from.</param>
            <returns>A <see cref="T:System.Collections.Generic.KeyValuePair`2"/> sequence of column names and values resolved from the specified <paramref name="reader"/>.</returns>
        </member>
        <member name="M:Cuemon.Data.DataManager.ReaderToStream(System.Data.Common.DbDataReader)">
            <summary>
            Converts the given <see cref="T:System.Data.Common.DbDataReader"/> compatible object to a stream.
            Note: DbDataReader must return only one field (for instance, a XML field), otherwise an exception is thrown!
            </summary>
            <param name="value">The <see cref="T:System.Data.Common.DbDataReader"/> to build a stream from.</param>
            <returns>A <b><see cref="T:System.IO.Stream"/></b> object.</returns>
        </member>
        <member name="M:Cuemon.Data.DataManager.ReaderToString(System.Data.Common.DbDataReader)">
            <summary>
            Converts the given <see cref="T:System.Data.Common.DbDataReader"/> compatible object to a string.
            Note: DbDataReader must return only one field, otherwise an exception is thrown!
            </summary>
            <param name="value">The <see cref="T:System.Data.Common.DbDataReader"/> to build a string from.</param>
            <returns>A <b><see cref="T:System.String"/></b> object.</returns>
        </member>
        <member name="M:Cuemon.Data.DataManager.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="M:Cuemon.Data.DataManager.Execute(Cuemon.Data.IDataCommand,System.Data.IDbDataParameter[])">
            <summary>
            Executes the command statement and returns the number of rows affected.
            </summary>
            <param name="dataCommand">The data command to execute.</param>
            <param name="parameters">The parameters to use in the command.</param>
            <returns>
            A <b><see cref="T:System.Int32"/></b> value.
            </returns>
        </member>
        <member name="M:Cuemon.Data.DataManager.ExecuteExists(Cuemon.Data.IDataCommand,System.Data.IDbDataParameter[])">
            <summary>
            Executes the command statement and returns <c>true</c> if one or more records exists; otherwise <c>false</c>.
            </summary>
            <param name="dataCommand">The data command to execute.</param>
            <param name="parameters">The parameters to use in the command.</param>
            <returns>
            A <b><see cref="T:System.Boolean"/></b> value.
            </returns>
        </member>
        <member name="M:Cuemon.Data.DataManager.ExecuteIdentityInt32(Cuemon.Data.IDataCommand,System.Data.IDbDataParameter[])">
            <summary>
            Executes the command statement and returns an identity value as int.
            </summary>
            <param name="dataCommand">The data command to execute.</param>
            <param name="parameters">The parameters to use in the command.</param>
            <returns><see cref="T:System.Int32"/></returns>
        </member>
        <member name="M:Cuemon.Data.DataManager.ExecuteIdentityInt64(Cuemon.Data.IDataCommand,System.Data.IDbDataParameter[])">
            <summary>
            Executes the command statement and returns an identity value as long.
            </summary>
            <param name="dataCommand">The data command to execute.</param>
            <param name="parameters">The parameters to use in the command.</param>
            <returns><see cref="T:System.Int64"/></returns>
        </member>
        <member name="M:Cuemon.Data.DataManager.ExecuteIdentityDecimal(Cuemon.Data.IDataCommand,System.Data.IDbDataParameter[])">
            <summary>
            Executes the command statement and returns an identity value as decimal.
            </summary>
            <param name="dataCommand">The data command to execute.</param>
            <param name="parameters">The parameters to use in the command.</param>
            <returns><see cref="T:System.Decimal"/></returns>
        </member>
        <member name="M:Cuemon.Data.DataManager.ExecuteReader(Cuemon.Data.IDataCommand,System.Data.IDbDataParameter[])">
            <summary>
            Executes the command statement and returns an object supporting the DbDataReader interface.
            </summary>
            <param name="dataCommand">The data command to execute.</param>
            <param name="parameters">The parameters to use in the command.</param>
            <returns>
            An object supporting the <b><see cref="T:System.Data.Common.DbDataReader"/></b> interface.
            </returns>
        </member>
        <member name="M:Cuemon.Data.DataManager.ExecuteXmlString(Cuemon.Data.IDataCommand,System.Data.IDbDataParameter[])">
            <summary>
            Executes the command statement and returns a string object with the retrieved XML.
            </summary>
            <param name="dataCommand">The data command to execute.</param>
            <param name="parameters">The parameters to use in the command.</param>
            <returns>
            An <b><see cref="T:System.String"/></b> object.
            </returns>
        </member>
        <member name="M:Cuemon.Data.DataManager.ExecuteScalar(Cuemon.Data.IDataCommand,System.Data.IDbDataParameter[])">
            <summary>
            Executes the command statement, and returns the value from the first column of the first row in the result set.
            Additional columns or rows are ignored.
            </summary>
            <param name="dataCommand">The data command to execute.</param>
            <param name="parameters">The parameters to use in the command.</param>
            <returns>The first column of the first row in the result from <paramref name="dataCommand"/>.</returns>
        </member>
        <member name="M:Cuemon.Data.DataManager.ExecuteScalarAsType(Cuemon.Data.IDataCommand,System.Type,System.Data.IDbDataParameter[])">
            <summary>
            Executes the command statement, and returns the value as the specified <paramref name="returnType"/> from the first column of the first row in the result set.
            Additional columns or rows are ignored.
            </summary>
            <param name="dataCommand">The data command to execute.</param>
            <param name="returnType">The type to return the first column value as.</param>
            <param name="parameters">The parameters to use in the command.</param>
            <returns>The first column of the first row in the result from <paramref name="dataCommand"/> as the specified <paramref name="returnType"/>.</returns>
            <remarks>This method uses <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/> when casting the first column of the first row in the result from <paramref name="dataCommand"/>.</remarks>
        </member>
        <member name="M:Cuemon.Data.DataManager.ExecuteScalarAsType(Cuemon.Data.IDataCommand,System.Type,System.IFormatProvider,System.Data.IDbDataParameter[])">
            <summary>
            Executes the command statement, and returns the value as the specified <paramref name="returnType"/> from the first column of the first row in the result set.
            Additional columns or rows are ignored.
            </summary>
            <param name="dataCommand">The data command to execute.</param>
            <param name="returnType">The type to return the first column value as.</param>
            <param name="provider">An object that supplies culture-specific formatting information.</param>
            <param name="parameters">The parameters to use in the command.</param>
            <returns>The first column of the first row in the result from <paramref name="dataCommand"/> as the specified <paramref name="returnType"/>.</returns>
        </member>
        <member name="M:Cuemon.Data.DataManager.ExecuteScalarAs``1(Cuemon.Data.IDataCommand,System.Data.IDbDataParameter[])">
            <summary>
            Executes the command statement, and returns the value as <typeparamref name="TResult" /> from the first column of the first row in the result set.
            Additional columns or rows are ignored.
            </summary>
            <typeparam name="TResult">The type of the return value.</typeparam>
            <param name="dataCommand">The data command to execute.</param>
            <param name="parameters">The parameters to use in the command.</param>
            <returns>The first column of the first row in the result from <paramref name="dataCommand" /> as <typeparamref name="TResult"/>.</returns>
            <remarks>This method uses <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/> when casting the first column of the first row in the result from <paramref name="dataCommand"/>.</remarks>
        </member>
        <member name="M:Cuemon.Data.DataManager.ExecuteScalarAs``1(Cuemon.Data.IDataCommand,System.IFormatProvider,System.Data.IDbDataParameter[])">
            <summary>
            Executes the command statement, and returns the value as <typeparamref name="TResult" /> from the first column of the first row in the result set.
            Additional columns or rows are ignored.
            </summary>
            <typeparam name="TResult">The type of the return value.</typeparam>
            <param name="dataCommand">The data command to execute.</param>
            <param name="provider">An object that supplies culture-specific formatting information.</param>
            <param name="parameters">The parameters to use in the command.</param>
            <returns>The first column of the first row in the result from <paramref name="dataCommand" /> as <typeparamref name="TResult"/>.</returns>
        </member>
        <member name="M:Cuemon.Data.DataManager.ExecuteScalarAsBoolean(Cuemon.Data.IDataCommand,System.Data.IDbDataParameter[])">
            <summary>
            Executes the command statement, and returns the value as <see cref="T:System.Boolean"/> from the first column of the first row in the result set.
            Additional columns or rows are ignored.
            </summary>
            <param name="dataCommand">The data command to execute.</param>
            <param name="parameters">The parameters to use in the command.</param>
            <returns>The first column of the first row in the result from <paramref name="dataCommand" /> as <see cref="T:System.Boolean"/>.</returns>
        </member>
        <member name="M:Cuemon.Data.DataManager.ExecuteScalarAsDateTime(Cuemon.Data.IDataCommand,System.Data.IDbDataParameter[])">
            <summary>
            Executes the command statement, and returns the value as <see cref="T:System.DateTime"/> from the first column of the first row in the result set.
            Additional columns or rows are ignored.
            </summary>
            <param name="dataCommand">The data command to execute.</param>
            <param name="parameters">The parameters to use in the command.</param>
            <returns>The first column of the first row in the result from <paramref name="dataCommand" /> as <see cref="T:System.DateTime"/>.</returns>
        </member>
        <member name="M:Cuemon.Data.DataManager.ExecuteScalarAsInt16(Cuemon.Data.IDataCommand,System.Data.IDbDataParameter[])">
            <summary>
            Executes the command statement, and returns the value as <see cref="T:System.Int16"/> from the first column of the first row in the result set.
            Additional columns or rows are ignored.
            </summary>
            <param name="dataCommand">The data command to execute.</param>
            <param name="parameters">The parameters to use in the command.</param>
            <returns>The first column of the first row in the result from <paramref name="dataCommand" /> as <see cref="T:System.Int16"/>.</returns>
        </member>
        <member name="M:Cuemon.Data.DataManager.ExecuteScalarAsInt32(Cuemon.Data.IDataCommand,System.Data.IDbDataParameter[])">
            <summary>
            Executes the command statement, and returns the value as <see cref="T:System.Int32"/> from the first column of the first row in the result set.
            Additional columns or rows are ignored.
            </summary>
            <param name="dataCommand">The data command to execute.</param>
            <param name="parameters">The parameters to use in the command.</param>
            <returns>The first column of the first row in the result from <paramref name="dataCommand" /> as <see cref="T:System.Int32"/>.</returns>
        </member>
        <member name="M:Cuemon.Data.DataManager.ExecuteScalarAsInt64(Cuemon.Data.IDataCommand,System.Data.IDbDataParameter[])">
            <summary>
            Executes the command statement, and returns the value as <see cref="T:System.Int64"/> from the first column of the first row in the result set.
            Additional columns or rows are ignored.
            </summary>
            <param name="dataCommand">The data command to execute.</param>
            <param name="parameters">The parameters to use in the command.</param>
            <returns>The first column of the first row in the result from <paramref name="dataCommand" /> as <see cref="T:System.Int64"/>.</returns>
        </member>
        <member name="M:Cuemon.Data.DataManager.ExecuteScalarAsByte(Cuemon.Data.IDataCommand,System.Data.IDbDataParameter[])">
            <summary>
            Executes the command statement, and returns the value as <see cref="T:System.Byte"/> from the first column of the first row in the result set.
            Additional columns or rows are ignored.
            </summary>
            <param name="dataCommand">The data command to execute.</param>
            <param name="parameters">The parameters to use in the command.</param>
            <returns>The first column of the first row in the result from <paramref name="dataCommand" /> as <see cref="T:System.Byte"/>.</returns>
        </member>
        <member name="M:Cuemon.Data.DataManager.ExecuteScalarAsSByte(Cuemon.Data.IDataCommand,System.Data.IDbDataParameter[])">
            <summary>
            Executes the command statement, and returns the value as <see cref="T:System.SByte"/> from the first column of the first row in the result set.
            Additional columns or rows are ignored.
            </summary>
            <param name="dataCommand">The data command to execute.</param>
            <param name="parameters">The parameters to use in the command.</param>
            <returns>The first column of the first row in the result from <paramref name="dataCommand" /> as <see cref="T:System.SByte"/>.</returns>
        </member>
        <member name="M:Cuemon.Data.DataManager.ExecuteScalarAsDecimal(Cuemon.Data.IDataCommand,System.Data.IDbDataParameter[])">
            <summary>
            Executes the command statement, and returns the value as <see cref="T:System.Decimal"/> from the first column of the first row in the result set.
            Additional columns or rows are ignored.
            </summary>
            <param name="dataCommand">The data command to execute.</param>
            <param name="parameters">The parameters to use in the command.</param>
            <returns>The first column of the first row in the result from <paramref name="dataCommand" /> as <see cref="T:System.Decimal"/>.</returns>
        </member>
        <member name="M:Cuemon.Data.DataManager.ExecuteScalarAsDouble(Cuemon.Data.IDataCommand,System.Data.IDbDataParameter[])">
            <summary>
            Executes the command statement, and returns the value as <see cref="T:System.Double"/> from the first column of the first row in the result set.
            Additional columns or rows are ignored.
            </summary>
            <param name="dataCommand">The data command to execute.</param>
            <param name="parameters">The parameters to use in the command.</param>
            <returns>The first column of the first row in the result from <paramref name="dataCommand" /> as <see cref="T:System.Double"/>.</returns>
        </member>
        <member name="M:Cuemon.Data.DataManager.ExecuteScalarAsUInt16(Cuemon.Data.IDataCommand,System.Data.IDbDataParameter[])">
            <summary>
            Executes the command statement, and returns the value as <see cref="T:System.UInt16"/> from the first column of the first row in the result set.
            Additional columns or rows are ignored.
            </summary>
            <param name="dataCommand">The data command to execute.</param>
            <param name="parameters">The parameters to use in the command.</param>
            <returns>The first column of the first row in the result from <paramref name="dataCommand" /> as <see cref="T:System.UInt16"/>.</returns>
        </member>
        <member name="M:Cuemon.Data.DataManager.ExecuteScalarAsUInt32(Cuemon.Data.IDataCommand,System.Data.IDbDataParameter[])">
            <summary>
            Executes the command statement, and returns the value as <see cref="T:System.UInt32"/> from the first column of the first row in the result set.
            Additional columns or rows are ignored.
            </summary>
            <param name="dataCommand">The data command to execute.</param>
            <param name="parameters">The parameters to use in the command.</param>
            <returns>The first column of the first row in the result from <paramref name="dataCommand" /> as <see cref="T:System.UInt32"/>.</returns>
        </member>
        <member name="M:Cuemon.Data.DataManager.ExecuteScalarAsUInt64(Cuemon.Data.IDataCommand,System.Data.IDbDataParameter[])">
            <summary>
            Executes the command statement, and returns the value as <see cref="T:System.UInt64"/> from the first column of the first row in the result set.
            Additional columns or rows are ignored.
            </summary>
            <param name="dataCommand">The data command to execute.</param>
            <param name="parameters">The parameters to use in the command.</param>
            <returns>The first column of the first row in the result from <paramref name="dataCommand" /> as <see cref="T:System.UInt64"/>.</returns>
        </member>
        <member name="M:Cuemon.Data.DataManager.ExecuteScalarAsString(Cuemon.Data.IDataCommand,System.Data.IDbDataParameter[])">
            <summary>
            Executes the command statement, and returns the value as <see cref="T:System.String"/> from the first column of the first row in the result set.
            Additional columns or rows are ignored.
            </summary>
            <param name="dataCommand">The data command to execute.</param>
            <param name="parameters">The parameters to use in the command.</param>
            <returns>The first column of the first row in the result from <paramref name="dataCommand" /> as <see cref="T:System.String"/>.</returns>
        </member>
        <member name="M:Cuemon.Data.DataManager.ExecuteScalarAsGuid(Cuemon.Data.IDataCommand,System.Data.IDbDataParameter[])">
            <summary>
            Executes the command statement, and returns the value as <see cref="T:System.Guid"/> from the first column of the first row in the result set.
            Additional columns or rows are ignored.
            </summary>
            <param name="dataCommand">The data command to execute.</param>
            <param name="parameters">The parameters to use in the command.</param>
            <returns>The first column of the first row in the result from <paramref name="dataCommand" /> as <see cref="T:System.Guid"/>.</returns>
        </member>
        <member name="M:Cuemon.Data.DataManager.ExecuteCore``1(Cuemon.Data.IDataCommand,System.Data.IDbDataParameter[],System.Func{System.Data.Common.DbCommand,``0})">
            <summary>
            Core method for executing methods on the <see cref="T:System.Data.Common.DbCommand"/> object resolved from the virtual <see cref="M:Cuemon.Data.DataManager.ExecuteCommandCore(Cuemon.Data.IDataCommand,System.Data.IDbDataParameter[])"/> method.
            </summary>
            <typeparam name="T">The type to return.</typeparam>
            <param name="dataCommand">The data command to execute.</param>
            <param name="parameters">The parameters to use in the command.</param>
            <param name="commandInvoker">The function delegate that will invoke a method on the resolved <see cref="T:System.Data.Common.DbCommand"/> from the virtual <see cref="M:Cuemon.Data.DataManager.ExecuteCommandCore(Cuemon.Data.IDataCommand,System.Data.IDbDataParameter[])"/> method.</param>
            <returns>A value of <typeparamref name="T"/> that is equal to the invoked method of the <see cref="T:System.Data.Common.DbCommand"/> object.</returns>
        </member>
        <member name="M:Cuemon.Data.DataManager.ExecuteCommandCore(Cuemon.Data.IDataCommand,System.Data.IDbDataParameter[])">
            <summary>
            Core method for executing all commands.
            </summary>
            <param name="dataCommand">The data command to execute.</param>
            <param name="parameters">The parameters to use in the command.</param>
            <returns>System.Data.Common.DbCommand</returns>
        </member>
        <member name="M:Cuemon.Data.DataManager.GetCommandCore(Cuemon.Data.IDataCommand,System.Data.IDbDataParameter[])">
            <summary>
            Gets the command object to be used by all execute related methods.
            </summary>
            <param name="dataCommand">The data command to execute.</param>
            <param name="parameters">The parameters to use in the command.</param>
            <returns>An instance of a <see cref="T:System.Data.Common.DbCommand"/> implementation.</returns>
        </member>
        <member name="T:Cuemon.Data.DataReader`1">
            <summary>
            Provides a generic way of reading a forward-only stream of rows from a <typeparamref name="TRead"/> based data source. This is an abstract class.
            </summary>
            <typeparam name="TRead">The type of the value that this <see cref="T:System.Data.IDataReader"/> will read.</typeparam>
            <seealso cref="T:Cuemon.Disposable" />
            <seealso cref="T:System.Data.IDataReader" />
        </member>
        <member name="M:Cuemon.Data.DataReader`1.#ctor(System.Func{System.String,System.Action{Cuemon.FormattingOptions{System.Globalization.CultureInfo}},System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Data.DataReader`1"/> class.
            </summary>
            <param name="parser">The function delegate that returns a primitive object whose value is equivalent to the provided <see cref="T:System.String"/> value.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="parser"/> is null.
            </exception>
        </member>
        <member name="M:Cuemon.Data.DataReader`1.Contains(System.String)">
            <summary>
            Determines whether this instance contains a column with the specified name.
            </summary>
            <param name="name">The name of the column to find.</param>
            <returns><c>true</c> if this instance contains a column with the specified name; otherwise, <c>false</c>.</returns>
        </member>
        <member name="P:Cuemon.Data.DataReader`1.Item(System.String)">
            <summary>
            Gets the column with the specified name.
            </summary>
            <param name="name">The name of the column to find.</param>
            <returns>The column with the specified name as an <see cref="T:System.Object"/>.</returns>
        </member>
        <member name="P:Cuemon.Data.DataReader`1.Item(System.Int32)">
            <summary>
            Gets the column located at the specified index.
            </summary>
            <param name="i">The zero-based index of the column to get.</param>
            <returns>The column located at the specified index as an <see cref="T:System.Object"/>.</returns>
        </member>
        <member name="P:Cuemon.Data.DataReader`1.StringParser">
            <summary>
            Gets a reference to the function delegate that returns a primitive object whose value is equivalent to the provided <see cref="T:System.String"/> value.
            </summary>
            <value>A reference to the function delegate that this instance was constructed with.</value>
        </member>
        <member name="P:Cuemon.Data.DataReader`1.RowCount">
            <summary>
            Gets the currently processed row count of this instance.
            </summary>
            <value>The currently processed row count of this instance.</value>
        </member>
        <member name="P:Cuemon.Data.DataReader`1.FieldCount">
            <summary>
            Gets the number of columns in the current row.
            </summary>
            <value>When not positioned in a valid recordset, 0; otherwise, the number of columns in the current record.</value>
        </member>
        <member name="M:Cuemon.Data.DataReader`1.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents the current row of this instance.
            </summary>
            <returns>A <see cref="T:System.String" /> that represents the current row of this instance.</returns>
        </member>
        <member name="P:Cuemon.Data.DataReader`1.NullRead">
            <summary>
            Gets the value that indicates that no more rows exists.
            </summary>
            <value>The value that indicates that no more rows exists.</value>
        </member>
        <member name="M:Cuemon.Data.DataReader`1.ReadNext(`0)">
            <summary>
            Advances the <see cref="T:IDataReader" /> to the next record.
            </summary>
            <returns><typeparamref name="TRead"/> for as long as there are rows; <see cref="P:Cuemon.Data.DataReader`1.NullRead"/> when no more rows exists.</returns>
        </member>
        <member name="M:Cuemon.Data.DataReader`1.SetFields(System.Collections.Specialized.IOrderedDictionary)">
            <summary>
            Sets the fields of the current record invoked by <see cref="M:Cuemon.Data.DataReader`1.ReadNext(`0)"/>.
            </summary>
            <param name="fields">The fields of the current record invoked by <see cref="M:Cuemon.Data.DataReader`1.ReadNext(`0)"/>.</param>
        </member>
        <member name="M:Cuemon.Data.DataReader`1.GetBoolean(System.Int32)">
            <summary>
            Gets the value of the specified column as a Boolean.
            </summary>
            <param name="i">The zero-based column ordinal.</param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:Cuemon.Data.DataReader`1.GetByte(System.Int32)">
            <summary>
            Gets the 8-bit unsigned integer value of the specified column.
            </summary>
            <param name="i">The zero-based column ordinal.</param>
            <returns>The 8-bit unsigned integer value of the specified column.</returns>
        </member>
        <member name="M:Cuemon.Data.DataReader`1.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a stream of bytes from the specified column, starting at location indicated by dataOffset, into the buffer, starting at the location indicated by bufferOffset.
            </summary>
            <param name="i">The zero-based column ordinal.</param>
            <param name="fieldOffset">The index within the row from which to begin the read operation.</param>
            <param name="buffer">The buffer into which to copy the data.</param>
            <param name="bufferoffset">The index with the buffer to which the data will be copied.</param>
            <param name="length">The maximum number of characters to read.</param>
            <returns>The actual number of bytes read.</returns>
        </member>
        <member name="M:Cuemon.Data.DataReader`1.GetChar(System.Int32)">
            <summary>
            Gets the character value of the specified column.
            </summary>
            <param name="i">The zero-based column ordinal.</param>
            <returns>The character value of the specified column.</returns>
        </member>
        <member name="M:Cuemon.Data.DataReader`1.GetDateTime(System.Int32)">
            <summary>
            Gets the date and time data value of the specified field.
            </summary>
            <param name="i">The index of the field to find.</param>
            <returns>The date and time data value of the specified field.</returns>
        </member>
        <member name="M:Cuemon.Data.DataReader`1.GetDecimal(System.Int32)">
            <summary>
            Gets the fixed-position numeric value of the specified field.
            </summary>
            <param name="i">The index of the field to find.</param>
            <returns>The fixed-position numeric value of the specified field.</returns>
        </member>
        <member name="M:Cuemon.Data.DataReader`1.GetDouble(System.Int32)">
            <summary>
            Gets the double-precision floating point number of the specified field.
            </summary>
            <param name="i">The index of the field to find.</param>
            <returns>The double-precision floating point number of the specified field.</returns>
        </member>
        <member name="M:Cuemon.Data.DataReader`1.GetFieldType(System.Int32)">
            <summary>
            Gets the <see cref="T:System.Type" /> information corresponding to the type of <see cref="T:System.Object" /> that would be returned from <see cref="M:System.Data.IDataRecord.GetValue(System.Int32)" />.
            </summary>
            <param name="i">The index of the field to find.</param>
            <returns>The <see cref="T:System.Type" /> information corresponding to the type of <see cref="T:System.Object" /> that would be returned from <see cref="M:System.Data.IDataRecord.GetValue(System.Int32)" />.</returns>
        </member>
        <member name="M:Cuemon.Data.DataReader`1.GetFloat(System.Int32)">
            <summary>
            Gets the single-precision floating point number of the specified field.
            </summary>
            <param name="i">The index of the field to find.</param>
            <returns>The single-precision floating point number of the specified field.</returns>
        </member>
        <member name="M:Cuemon.Data.DataReader`1.GetGuid(System.Int32)">
            <summary>
            Returns the GUID value of the specified field.
            </summary>
            <param name="i">The index of the field to find.</param>
            <returns>The GUID value of the specified field.</returns>
        </member>
        <member name="M:Cuemon.Data.DataReader`1.GetInt16(System.Int32)">
            <summary>
            Gets the 16-bit signed integer value of the specified field.
            </summary>
            <param name="i">The index of the field to find.</param>
            <returns>The 16-bit signed integer value of the specified field.</returns>
        </member>
        <member name="M:Cuemon.Data.DataReader`1.GetInt32(System.Int32)">
            <summary>
            Gets the 32-bit signed integer value of the specified field.
            </summary>
            <param name="i">The index of the field to find.</param>
            <returns>The 32-bit signed integer value of the specified field.</returns>
        </member>
        <member name="M:Cuemon.Data.DataReader`1.GetInt64(System.Int32)">
            <summary>
            Gets the 64-bit signed integer value of the specified field.
            </summary>
            <param name="i">The index of the field to find.</param>
            <returns>The 64-bit signed integer value of the specified field.</returns>
        </member>
        <member name="M:Cuemon.Data.DataReader`1.GetName(System.Int32)">
            <summary>
            Gets the name for the field to find.
            </summary>
            <param name="i">The index of the field to find.</param>
            <returns>The name of the field or the empty string (""), if there is no value to return.</returns>
        </member>
        <member name="M:Cuemon.Data.DataReader`1.GetOrdinal(System.String)">
            <summary>
            Return the index of the named field.
            </summary>
            <param name="name">The name of the field to find.</param>
            <returns>The index of the named field.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="name"/> is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="name"/> is not a valid column name.
            </exception>
        </member>
        <member name="M:Cuemon.Data.DataReader`1.GetString(System.Int32)">
            <summary>
            Gets the string value of the specified field.
            </summary>
            <param name="i">The index of the field to find.</param>
            <returns>The string value of the specified field.</returns>
        </member>
        <member name="M:Cuemon.Data.DataReader`1.GetValue(System.Int32)">
            <summary>
            Return the value of the specified field.
            </summary>
            <param name="i">The index of the field to find.</param>
            <returns>The <see cref="T:System.Object" /> which will contain the field value upon return.</returns>
        </member>
        <member name="M:Cuemon.Data.DataReader`1.IsDBNull(System.Int32)">
            <summary>
            Return whether the specified field is set to null.
            </summary>
            <param name="i">The index of the field to find.</param>
            <returns>true if the specified field is set to null; otherwise, false.</returns>
        </member>
        <member name="M:Cuemon.Data.DataReader`1.Read">
            <summary>
            Advances the <see cref="T:System.Data.IDataReader" /> to the next record.
            </summary>
            <returns><see langword="true" /> if there are more rows; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="P:Cuemon.Data.DataReader`1.Depth">
            <summary>
            Gets a value indicating the depth of nesting for the current row.
            </summary>
            <value>The level of nesting.</value>
        </member>
        <member name="M:Cuemon.Data.DataReader`1.GetValues(System.Object[])">
            <summary>
            Populates an array of objects with the column values of the current record.
            </summary>
            <param name="values">An array of <see cref="T:System.Object" /> to copy the attribute fields into.</param>
            <returns>The number of instances of <see cref="T:System.Object" /> in the array.</returns>
        </member>
        <member name="T:Cuemon.Data.DataTransfer">
            <summary>
            Provides a way to convert an <see cref="T:System.Data.IDataReader"/> implementation to a table-like data transfer object.
            </summary>
        </member>
        <member name="M:Cuemon.Data.DataTransfer.GetRows(System.Data.IDataReader)">
            <summary>
            Converts the specified <paramref name="reader"/> implementation to a table-like data transfer object collection.
            </summary>
            <param name="reader">The reader to be converted.</param>
            <returns>A <see cref="T:Cuemon.Data.DataTransferRowCollection"/> that is the result of the specified <paramref name="reader"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="reader"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="reader"/> is closed.
            </exception>
        </member>
        <member name="M:Cuemon.Data.DataTransfer.GetColumns(System.Data.IDataReader)">
            <summary>
            Converts the specified and read-initialized <paramref name="reader"/> implementation to a column-like data transfer object collection.
            </summary>
            <param name="reader">The read-initialized reader to be converted.</param>
            <returns>A <see cref="T:Cuemon.Data.DataTransferColumnCollection"/> that is the result of the specified and read-initialized <paramref name="reader"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="reader"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="reader"/> is closed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Invalid attempt to read from <paramref name="reader"/> when no data is present.
            </exception>
        </member>
        <member name="T:Cuemon.Data.DataTransferColumn">
            <summary>
            Represents the column meta information of a table-row in a database. This class cannot be inherited.
            </summary>
        </member>
        <member name="M:Cuemon.Data.DataTransferColumn.#ctor(System.Int32,System.String,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Data.DataTransferColumn"/> class.
            </summary>
            <param name="ordinal">The ordinal position of the column.</param>
            <param name="name">The name of the column.</param>
            <param name="dataType">The type of data stored in the column.</param>
        </member>
        <member name="P:Cuemon.Data.DataTransferColumn.Ordinal">
            <summary>
            Gets the (zero-based) position of the column.
            </summary>
            <value>The position of the column.</value>
        </member>
        <member name="P:Cuemon.Data.DataTransferColumn.Name">
            <summary>
            Gets the name of the column.
            </summary>
            <value>The name of the column.</value>
        </member>
        <member name="P:Cuemon.Data.DataTransferColumn.DataType">
            <summary>
            Gets the type of data stored in the column.
            </summary>
            <value>A <see cref="T:System.Type"/> object that represents the column data type.</value>
        </member>
        <member name="M:Cuemon.Data.DataTransferColumn.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="T:Cuemon.Data.DataTransferColumnCollection">
            <summary>
            Represents a collection of <see cref="T:Cuemon.Data.DataTransferColumn"/> objects for a table in a database. This class cannot be inherited.
            </summary>
        </member>
        <member name="M:Cuemon.Data.DataTransferColumnCollection.#ctor(System.Data.IDataRecord)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Data.DataTransferColumnCollection"/> class.
            </summary>
            <param name="record">The record to convert.</param>
        </member>
        <member name="P:Cuemon.Data.DataTransferColumnCollection.Item(System.String)">
            <summary>
            Gets the <see cref="T:Cuemon.Data.DataTransferColumn"/> from the collection with the specified name.
            </summary>
            <param name="name">The name of the column from which to return.</param>
            <returns>A <see cref="T:Cuemon.Data.DataTransferColumn"/> if found; otherwise null.</returns>
        </member>
        <member name="T:Cuemon.Data.DataTransferRow">
            <summary>
            Represents the row of a table in a database. This class cannot be inherited.
            </summary>
        </member>
        <member name="P:Cuemon.Data.DataTransferRow.Number">
            <summary>
            Gets the row number.
            </summary>
            <value>The row number.</value>
        </member>
        <member name="P:Cuemon.Data.DataTransferRow.Columns">
            <summary>
            Gets the associated columns of this row.
            </summary>
            <value>The associated columns of this row.</value>
        </member>
        <member name="P:Cuemon.Data.DataTransferRow.Item(Cuemon.Data.DataTransferColumn)">
            <summary>
            Gets the value of a <see cref="T:Cuemon.Data.DataTransferColumn"/> from the <see cref="P:Cuemon.Data.DataTransferRow.Columns"/> with the specified <paramref name="column"/>.
            </summary>
            <param name="column">The column from which to return the value from.</param>
            <returns>An <see cref="T:System.Object"/> that contains the data of the column.</returns>
        </member>
        <member name="P:Cuemon.Data.DataTransferRow.Item(System.String)">
            <summary>
            Gets the value of a <see cref="T:Cuemon.Data.DataTransferColumn"/> from the <see cref="P:Cuemon.Data.DataTransferRow.Columns"/> with the specified <paramref name="name"/>.
            </summary>
            <param name="name">The name of the column from which to return the value from.</param>
            <returns>An <see cref="T:System.Object"/> that contains the data of the column.</returns>
        </member>
        <member name="P:Cuemon.Data.DataTransferRow.Item(System.Int32)">
            <summary>
            Gets the value of a <see cref="T:Cuemon.Data.DataTransferColumn"/> from the <see cref="P:Cuemon.Data.DataTransferRow.Columns"/> with the specified <paramref name="index"/>.
            </summary>
            <param name="index">The zero-based index of the column from which to return the value from.</param>
            <returns>An <see cref="T:System.Object"/> that contains the data of the column.</returns>
        </member>
        <member name="M:Cuemon.Data.DataTransferRow.As``1(Cuemon.Data.DataTransferColumn)">
            <summary>
            Gets the value of a <see cref="T:Cuemon.Data.DataTransferColumn"/> from the <see cref="P:Cuemon.Data.DataTransferRow.Columns"/> with the specified <paramref name="column"/>.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="column">The column from which to return the value from.</param>
            <returns>The value associated with the <paramref name="column"/> converted to the specified <typeparamref name="TResult"/>.</returns>
        </member>
        <member name="M:Cuemon.Data.DataTransferRow.As``1(System.String)">
            <summary>
            Gets the value of a <see cref="T:Cuemon.Data.DataTransferColumn"/> from the <see cref="P:Cuemon.Data.DataTransferRow.Columns"/> with the specified <paramref name="name"/>.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="name">The name of the column from which to return the value from.</param>
            <returns>The value associated with the <paramref name="name"/> of a column converted to the specified <typeparamref name="TResult"/>.</returns>
        </member>
        <member name="M:Cuemon.Data.DataTransferRow.As``1(System.Int32)">
            <summary>
            Gets the value of a <see cref="T:Cuemon.Data.DataTransferColumn"/> from the <see cref="P:Cuemon.Data.DataTransferRow.Columns"/> with the specified <paramref name="index"/>.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="index">The zero-based index of the column from which to return the value from.</param>
            <returns>The value associated with the zero-based <paramref name="index"/> of a column converted to the specified <typeparamref name="TResult"/>.</returns>
        </member>
        <member name="M:Cuemon.Data.DataTransferRow.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="T:Cuemon.Data.DataTransferRowCollection">
            <summary>
            Represents a collection of <see cref="T:Cuemon.Data.DataTransferRow"/> objects for a table in a database. This class cannot be inherited.
            </summary>
        </member>
        <member name="M:Cuemon.Data.DataTransferRowCollection.#ctor(System.Data.IDataReader)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Data.DataTransferRowCollection"/> class.
            </summary>
            <param name="reader">The reader to convert.</param>
        </member>
        <member name="P:Cuemon.Data.DataTransferRowCollection.ColumnNames">
            <summary>
            Gets the column names that is present in this <see cref="T:Cuemon.Data.DataTransferRow"/>.
            </summary>
            <value>The column names of a table-row in a database.</value>
        </member>
        <member name="P:Cuemon.Data.DataTransferRowCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:Cuemon.Data.DataTransferRow"/> at the specified index.
            </summary>
            <param name="index">The zero-based index of the row to return.</param>
            <returns>The specified <see cref="T:Cuemon.Data.DataTransferRow"/>.</returns>
        </member>
        <member name="M:Cuemon.Data.DataTransferRowCollection.Contains(Cuemon.Data.DataTransferRow)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
            <returns>true if <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false.</returns>
        </member>
        <member name="P:Cuemon.Data.DataTransferRowCollection.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <value>The count.</value>
            <returns>The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.</returns>
        </member>
        <member name="M:Cuemon.Data.DataTransferRowCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Cuemon.Data.DataTransferRowCollection.IndexOf(Cuemon.Data.DataTransferRow)">
            <summary>
            Determines the index of a specific item in the <see cref="T:System.Collections.Generic.IList`1" />.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.IList`1" />.</param>
            <returns>The index of <paramref name="item" /> if found in the list; otherwise, -1.</returns>
        </member>
        <member name="T:Cuemon.Data.DbColumn">
            <summary>
            Represents a database column.
            </summary>
        </member>
        <member name="M:Cuemon.Data.DbColumn.#ctor(System.Data.DbType,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Data.DbColumn"/> class.
            </summary>
            <param name="columnDbType">The <see cref="T:System.Data.DbType"/> of the database column.</param>
            <param name="columnValue">The value of the database column.</param>
        </member>
        <member name="P:Cuemon.Data.DbColumn.ColumnDbType">
            <summary>
            Gets the <see cref="T:System.Data.DbType"/> of the database column.
            </summary>
            <value>
            The <see cref="T:System.Data.DbType"/> of the database column.
            </value>
        </member>
        <member name="P:Cuemon.Data.DbColumn.ColumnType">
            <summary>
            Gets the <see cref="T:System.Type"/> of the database column.
            </summary>
            <value>
            The <see cref="T:System.Type"/> of the database column.
            </value>
        </member>
        <member name="P:Cuemon.Data.DbColumn.ColumnValue">
            <summary>
            Gets the database column value.
            </summary>
        </member>
        <member name="T:Cuemon.Data.DbParameterEqualityComparer">
            <summary>
            Provides an equality comparison for <see cref="T:System.Data.Common.DbParameter"/> objects.
            </summary>
        </member>
        <member name="P:Cuemon.Data.DbParameterEqualityComparer.Default">
            <summary>
            Returns a default equality comparer for <see cref="T:System.Data.Common.DbParameter"/>.
            </summary>
        </member>
        <member name="M:Cuemon.Data.DbParameterEqualityComparer.Equals(System.Data.Common.DbParameter,System.Data.Common.DbParameter)">
            <summary>
            When overridden in a derived class, determines whether two objects of type T are equal.
            </summary>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <returns>
            true if the specified objects are equal; otherwise, false.
            </returns>
        </member>
        <member name="M:Cuemon.Data.DbParameterEqualityComparer.GetHashCode(System.Data.Common.DbParameter)">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <param name="obj">The obj.</param>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
            <exception cref="T:System.ArgumentNullException">The type of obj is a reference type and obj is null.</exception>
        </member>
        <member name="T:Cuemon.Data.DsvDataReader">
            <summary>
            Provides a way of reading a forward-only stream of rows from a DSV (Delimiter Separated Values) based data source. This class cannot be inherited.
            </summary>
        </member>
        <member name="M:Cuemon.Data.DsvDataReader.#ctor(System.IO.StreamReader,System.String,System.Char,System.Char,System.Func{System.String,System.Action{Cuemon.FormattingOptions{System.Globalization.CultureInfo}},System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Data.DsvDataReader"/> class.
            </summary>
            <param name="reader">The <see cref="T:System.IO.StreamReader"/> object that contains the DSV data.</param>
            <param name="header">The header defining the columns of the DSV data. Default is reading the first line of the <paramref name="reader"/>.</param>
            <param name="delimiter">The delimiter specification. Default is comma (,).</param>
            <param name="qualifier">The qualifier specification. Default is double-quote (").</param>
            <param name="parser">The function delegate that returns a primitive object whose value is equivalent to the provided <see cref="T:System.String"/> value. Default is <see cref="M:Cuemon.Text.ParserFactory.FromValueType"/>.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="header"/> cannot be empty or consist only of white-space characters -or-
            <paramref name="header"/> does not contain the specified <paramref name="delimiter"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="reader"/> is null -or-
            <paramref name="delimiter"/> is null -or-
            <paramref name="qualifier"/> is null.
            </exception>
        </member>
        <member name="P:Cuemon.Data.DsvDataReader.Delimiter">
            <summary>
            Gets the delimiter used to separate fields of this instance.
            </summary>
            <value>The delimiter used to separate fields of this instance.</value>
        </member>
        <member name="P:Cuemon.Data.DsvDataReader.Header">
            <summary>
            Gets the header that defines the field names of this instance.
            </summary>
            <value>The header that defines the field names of this instance.</value>
        </member>
        <member name="P:Cuemon.Data.DsvDataReader.Qualifier">
            <summary>
            Gets the qualifier that surrounds a field.
            </summary>
            <value>The qualifier that surrounds a field.</value>
        </member>
        <member name="P:Cuemon.Data.DsvDataReader.RowCount">
            <summary>
            Gets the currently processed row count of this instance.
            </summary>
            <value>The currently processed row count of this instance.</value>
            <remarks>This property is incremented when the invoked <see cref="M:Cuemon.Data.DsvDataReader.Read"/> method returns <c>true</c>.</remarks>
        </member>
        <member name="P:Cuemon.Data.DsvDataReader.NullRead">
            <summary>
            Gets the value that indicates that no more rows exists.
            </summary>
            <value>The value that indicates that no more rows exists.</value>
        </member>
        <member name="M:Cuemon.Data.DsvDataReader.ReadNext(System.String[])">
            <summary>
            Advances this instance to the next record.
            </summary>
            <returns>A <see cref="T:string[]"/> for as long as there are rows; <see cref="P:Cuemon.Data.DsvDataReader.NullRead"/> when no more rows exists.</returns>
        </member>
        <member name="M:Cuemon.Data.DsvDataReader.Read">
            <summary>
            Advances this instance to the next line of the DSV data source.
            </summary>
            <returns><c>true</c> if there are more lines; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ObjectDisposedException">
            This instance has been disposed.
            </exception>
        </member>
        <member name="M:Cuemon.Data.DsvDataReader.ReadAsync">
            <summary>
            Asynchronously advances this instance to the next line of the DSV data source.
            </summary>
            <returns><c>true</c> if there are more lines; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ObjectDisposedException">
            This instance has been disposed.
            </exception>
        </member>
        <member name="M:Cuemon.Data.DsvDataReader.OnDisposeManagedResources">
            <summary>
            Called when this object is being disposed by either <see cref="M:Cuemon.Disposable.Dispose" /> or <see cref="M:Cuemon.Disposable.Dispose(System.Boolean)" /> having <c>disposing</c> set to <c>true</c> and <see cref="P:Cuemon.Disposable.Disposed" /> is <c>false</c>.
            </summary>
        </member>
        <member name="T:Cuemon.Data.IDataCommand">
            <summary>
            Represents a statement that is executed while an open connection to a data source exists.
            </summary>
        </member>
        <member name="P:Cuemon.Data.IDataCommand.Text">
            <summary>
            Gets or sets the command text to execute.
            </summary>
            <value>The command text to execute.</value>
        </member>
        <member name="P:Cuemon.Data.IDataCommand.Type">
            <summary>
            Gets or sets the command type value to execute.
            </summary>
            <value>The command type value to execute.</value>
        </member>
        <member name="P:Cuemon.Data.IDataCommand.Timeout">
            <summary>
            Gets or sets the wait time before terminating the attempt to execute a command and generating an error.
            </summary>
            <value>The timespan to wait for the command to execute.</value>
        </member>
        <member name="T:Cuemon.Data.IDataConnection">
            <summary>
            Represents a connection to a data source.
            </summary>
        </member>
        <member name="P:Cuemon.Data.IDataConnection.Address">
            <summary>
            Gets or sets the server address of the connection.
            </summary>
            <value>The server address of the connection.</value>
        </member>
        <member name="P:Cuemon.Data.IDataConnection.NetworkLibrary">
            <summary>
            Gets or sets the network library of the connection.
            </summary>
            <value>The network library of the connection.</value>
        </member>
        <member name="P:Cuemon.Data.IDataConnection.Password">
            <summary>
            Gets or sets the password of the connection.
            </summary>
            <value>The password of the connection.</value>
        </member>
        <member name="P:Cuemon.Data.IDataConnection.Timeout">
            <summary>
            Gets or sets the time to wait while trying to establish a connection before terminating the attempt and generating an error.
            </summary>
            <value>The timespan to wait for a connection to open. The default value is 10 seconds.</value>
        </member>
        <member name="P:Cuemon.Data.IDataConnection.UserId">
            <summary>
            Gets or sets the user id of the connection.
            </summary>
            <value>The user id of the connection.</value>
        </member>
        <member name="T:Cuemon.Data.InOperator`1">
            <summary>
            Provides a safe way to include a Transact-SQL WHERE clause with an IN operator.
            </summary>
        </member>
        <member name="M:Cuemon.Data.InOperator`1.#ctor(System.Func{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Data.InOperator`1" /> class.
            </summary>
            <param name="parameterPrefixGenerator">The function delegate that generates a random prefix for a parameter name.</param>
        </member>
        <member name="P:Cuemon.Data.InOperator`1.ParameterPrefix">
            <summary>
            Gets the prefix of the parameter name that will be concatenated with <c>index</c> of both <see cref="M:Cuemon.Data.InOperator`1.ArgumentsSelector(`0,System.Int32)"/> and <see cref="M:Cuemon.Data.InOperator`1.ParametersSelector(`0,System.Int32)"/>.
            </summary>
            <value>The prefix of the parameter name that will be concatenated with <c>index</c>.</value>
        </member>
        <member name="M:Cuemon.Data.InOperator`1.ArgumentsSelector(`0,System.Int32)">
            <summary>
            A callback method that is responsible for the values passed to the <see cref="M:Cuemon.Data.InOperator`1.ToSafeResult(`0[])"/> method.
            </summary>
            <param name="expression">An expression to test for a match in the IN operator.</param>
            <param name="index">The index of the <paramref name="expression"/>.</param>
            <returns>A <see cref="T:System.String"/> representing the argument of the <paramref name="expression"/>.</returns>
            <remarks>Default is <c>@param</c> concatenated with <see cref="P:Cuemon.Data.InOperator`1.ParameterPrefix"/> and <paramref name="index"/>, eg. <c>@paramAbcdef0</c>.</remarks>
        </member>
        <member name="M:Cuemon.Data.InOperator`1.ParametersSelector(`0,System.Int32)">
            <summary>
            A callback method that is responsible for the values passed to the <see cref="M:Cuemon.Data.InOperator`1.ToSafeResult(`0[])"/> method.
            </summary>
            <param name="expression">An expression to test for a match in the IN operator.</param>
            <param name="index">The index of the <paramref name="expression"/>.</param>
            <returns>An <see cref="T:System.Data.IDbDataParameter"/> representing the value of the <paramref name="expression"/>.</returns>
        </member>
        <member name="M:Cuemon.Data.InOperator`1.ToSafeResult(`0[])">
            <summary>
            Converts the specified sequence of <paramref name="expressions"/> to a SQL injection safe <see cref="T:Cuemon.Data.InOperatorResult"/>.
            </summary>
            <param name="expressions">The expressions to test for a match in the IN operator of the WHERE clause.</param>
            <returns>A new instance of <see cref="T:Cuemon.Data.InOperatorResult"/>.</returns>
        </member>
        <member name="M:Cuemon.Data.InOperator`1.ToSafeResult(System.Collections.Generic.IEnumerable{`0},System.Func{System.Collections.Generic.IEnumerable{System.String},System.String})">
            <summary>
            Converts the specified sequence of <paramref name="expressions"/> to a SQL injection safe <see cref="T:Cuemon.Data.InOperatorResult"/>.
            </summary>
            <param name="expressions">The expressions to test for a match in the IN operator of the WHERE clause.</param>
            <param name="argumentsStringConverter">The function delegate arguments string converter.</param>
            <returns>A new instance of <see cref="T:Cuemon.Data.InOperatorResult"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="expressions"/> cannot be null.
            </exception>
        </member>
        <member name="T:Cuemon.Data.InOperatorResult">
            <summary>
            Provides the result of an <see cref="T:Cuemon.Data.InOperator`1"/> operation.
            </summary>
        </member>
        <member name="P:Cuemon.Data.InOperatorResult.Arguments">
            <summary>
            Gets the arguments for the IN operator.
            </summary>
            <value>The arguments for the IN operator.</value>
            <remarks>Default format of arguments is <c>@paramAbcdef0, @paramAbcdef1, @paramAbcdef2</c>, etc. and is controlled by the <see cref="M:Cuemon.Data.InOperator`1.ArgumentsSelector(`0,System.Int32)"/> method.</remarks>
        </member>
        <member name="P:Cuemon.Data.InOperatorResult.Parameters">
            <summary>
            Gets the parameters for the IN operator.
            </summary>
            <value>The parameters for the IN operator.</value>
        </member>
        <member name="M:Cuemon.Data.InOperatorResult.ToParametersArray">
            <summary>
            Converts the parameters for the IN operator to an <see cref="T:IDbDataParameter[]"/>.
            </summary>
            <returns>An array of <see cref="T:System.Data.IDbDataParameter"/>.</returns>
        </member>
        <member name="M:Cuemon.Data.InOperatorResult.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="T:Cuemon.Data.QueryBuilder">
            <summary>
            An abstract class for building T-SQL statements from table and columns definitions.
            </summary>
        </member>
        <member name="M:Cuemon.Data.QueryBuilder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Data.QueryBuilder"/> class.
            </summary>
        </member>
        <member name="M:Cuemon.Data.QueryBuilder.#ctor(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Data.QueryBuilder"/> class.
            </summary>
            <param name="tableName">The name of the table or view.</param>
            <param name="keyColumns">The key columns to be used in this <see cref="T:Cuemon.Data.QueryBuilder"/> instance.</param>
        </member>
        <member name="M:Cuemon.Data.QueryBuilder.#ctor(System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Data.QueryBuilder"/> class.
            </summary>
            <param name="tableName">The name of the table or view.</param>
            <param name="keyColumns">The key columns to be used in this <see cref="T:Cuemon.Data.QueryBuilder"/> instance.</param>
            <param name="columns">The none-key columns to be used in this <see cref="T:Cuemon.Data.QueryBuilder"/> instance.</param>
        </member>
        <member name="P:Cuemon.Data.QueryBuilder.ReadLimit">
            <summary>
            Gets or sets a value limiting the maximum amount of records that can be retrieved from a repository. Default is 1000.
            </summary>
            <value>
            The maximum amount of records that can be retrieved from a repository.
            </value>
        </member>
        <member name="P:Cuemon.Data.QueryBuilder.EnableReadLimit">
            <summary>
            Gets or sets a value indicating whether a query is restricted in how many records (<see cref="P:Cuemon.Data.QueryBuilder.ReadLimit"/>) can be retrieved from a repository. Default is false.
            </summary>
            <value>
              <c>true</c> if a query is restricted in how many records (<see cref="P:Cuemon.Data.QueryBuilder.ReadLimit"/>) can be retrieved from a repository; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Cuemon.Data.QueryBuilder.EnableTableAndColumnEncapsulation">
            <summary>
            Gets or sets a value indicating whether an encapsulation should be committed automatically on table and column names.
            </summary>
            <value>
            	<c>true</c> if an encapsulation should be committed automatically on table and column names; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Cuemon.Data.QueryBuilder.EnableDirtyReads">
            <summary>
            Gets or sets a value indicating whether the data source should try to prevent locking from readonly queries.
            </summary>
            <value><c>true</c> if the data source should try to prevent locking from readonly queries; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Cuemon.Data.QueryBuilder.TableName">
            <summary>
            Gets or sets the name of the table or view.
            </summary>
            <value>The name of the table or view.</value>
        </member>
        <member name="P:Cuemon.Data.QueryBuilder.Columns">
            <summary>
            Gets the none-key columns to be used in the <see cref="T:Cuemon.Data.QueryBuilder"/> instance.
            </summary>
            <value>The none-key columns to be used in the <see cref="T:Cuemon.Data.QueryBuilder"/> instance.</value>
        </member>
        <member name="P:Cuemon.Data.QueryBuilder.KeyColumns">
            <summary>
            Gets the key columns to be used in the <see cref="T:Cuemon.Data.QueryBuilder"/> instance.
            </summary>
            <value>The key columns to be used in the <see cref="T:Cuemon.Data.QueryBuilder"/> instance.</value>
        </member>
        <member name="M:Cuemon.Data.QueryBuilder.EncodeFragment(Cuemon.Data.QueryFormat,System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>
            Encodes the specified sequence of <paramref name="values"/> into the desired <paramref name="format"/> of fragments.
            </summary>
            <param name="format">One of the enumeration values that specifies the fragment to produce.</param>
            <param name="values">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to convert into the desired <paramref name="format"/> of fragments.</param>
            <param name="distinct">if set to <c>true</c>, <paramref name="values"/> will be filtered for doublets.</param>
            <returns>A query fragment in the desired format.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="values"/> cannot be null.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="values"/> contains no elements.
            </exception>
        </member>
        <member name="M:Cuemon.Data.QueryBuilder.GetQuery(Cuemon.Data.QueryType)">
            <summary>
            Create and returns the query from the specified <see cref="T:Cuemon.Data.QueryType"/>.
            </summary>
            <param name="queryType">Type of the query to create.</param>
            <returns>The result of the builder as a T-SQL query.</returns>
        </member>
        <member name="M:Cuemon.Data.QueryBuilder.GetQuery(Cuemon.Data.QueryType,System.String)">
            <summary>
            Create and returns the builded query from the specified <see cref="T:Cuemon.Data.QueryType"/>.
            </summary>
            <param name="queryType">Type of the query to create.</param>
            <param name="tableName">The name of the table or view. Overrides the class wide tableName.</param>
            <returns></returns>
        </member>
        <member name="M:Cuemon.Data.QueryBuilder.Append(System.String)">
            <summary>
            Appends the specified query fragment to the end of this instance.
            </summary>
            <param name="queryFragment">The query fragment to append.</param>
            <returns>A reference to this instance after the operation has completed.</returns>
        </member>
        <member name="M:Cuemon.Data.QueryBuilder.Append(System.String,System.Object[])">
            <summary>
            Appends a formatted query fragment, which contains zero or more format specifications, to the end of this instance.
            Each format specification is replaced by the string representation of a corresponding object argument.
            </summary>
            <param name="queryFragment">The query fragment to append.</param>
            <param name="args">An array of objects to format.</param>
            <returns>A reference to this instance after the operation has completed.</returns>
        </member>
        <member name="M:Cuemon.Data.QueryBuilder.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="T:Cuemon.Data.QueryFormat">
            <summary>
            Identifies the format for a query fragment.
            </summary>
        </member>
        <member name="F:Cuemon.Data.QueryFormat.Delimited">
            <summary>
            Indicates that the query fragment should be in the format; value, value, value.
            </summary>
        </member>
        <member name="F:Cuemon.Data.QueryFormat.DelimitedString">
            <summary>
            Indicates that the query fragment should be in the format; 'value', 'value', 'value'.
            </summary>
        </member>
        <member name="F:Cuemon.Data.QueryFormat.DelimitedSquareBracket">
            <summary>
            Indicates that the query fragment should be in the format; [value], [value], [value].
            </summary>
        </member>
        <member name="T:Cuemon.Data.QueryInsertAction">
            <summary>
            Defines the available insert actions for the <see cref="T:Cuemon.Data.DataAdapter"/> class.
            </summary>
        </member>
        <member name="F:Cuemon.Data.QueryInsertAction.Void">
            <summary>
            Indicates that no value will be returned by the insert query.
            </summary>
        </member>
        <member name="F:Cuemon.Data.QueryInsertAction.IdentityInt32">
            <summary>
            Indicates that a <see cref="T:System.Int32"/> value will be returned by the insert query.
            </summary>
        </member>
        <member name="F:Cuemon.Data.QueryInsertAction.IdentityInt64">
            <summary>
            Indicates that a <see cref="T:System.Int64"/> value will be returned by the insert query.
            </summary>
        </member>
        <member name="F:Cuemon.Data.QueryInsertAction.IdentityDecimal">
            <summary>
            Indicates that a <see cref="T:System.Decimal"/> value will be returned by the insert query.
            </summary>
        </member>
        <member name="F:Cuemon.Data.QueryInsertAction.AffectedRows">
            <summary>
            Indicates that a <see cref="T:System.Int32"/> value will be returned with the amount of affected rows by the insert query.
            </summary>
        </member>
        <member name="T:Cuemon.Data.QueryType">
            <summary>
            Identifies the type of data operation performed by a query against a data source.
            </summary>
        </member>
        <member name="F:Cuemon.Data.QueryType.Select">
            <summary>
            Indicates that a query is used for a data operation that retrieves data.
            </summary>
        </member>
        <member name="F:Cuemon.Data.QueryType.Update">
            <summary>
            Indicates that a query is used for a data operation that updates data.
            </summary>
        </member>
        <member name="F:Cuemon.Data.QueryType.Insert">
            <summary>
            Indicates that a query is used for a data operation that inserts data.
            </summary>
        </member>
        <member name="F:Cuemon.Data.QueryType.Delete">
            <summary>
            Indicates that a query is used for a data operation that deletes data.
            </summary>
        </member>
        <member name="F:Cuemon.Data.QueryType.Exists">
            <summary>
            Indicates that a query is specifically used for a lookup on whether a data record exists.
            </summary>
        </member>
        <member name="T:Cuemon.Data.TokenBuilder">
            <summary>
            Represents a mutable string of characters optimized for tokens. This class cannot be inherited.
            </summary>
        </member>
        <member name="M:Cuemon.Data.TokenBuilder.#ctor(System.Char,System.Char,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Data.TokenBuilder"/> class.
            </summary>
            <param name="delimiter">The delimiter used to separate tokens of this instance.</param>
            <param name="qualifier">The qualifier that surrounds a token.</param>
            <param name="tokens">The total number of tokens.</param>
        </member>
        <member name="P:Cuemon.Data.TokenBuilder.Tokens">
            <summary>
            Gets the total number of tokens this builder represents.
            </summary>
            <value>The total number of tokens this builder represents.</value>
        </member>
        <member name="P:Cuemon.Data.TokenBuilder.Delimiter">
            <summary>
            Gets the delimiter used to separate tokens of this builder.
            </summary>
            <value>The delimiter used to separate tokens of this builder.</value>
        </member>
        <member name="P:Cuemon.Data.TokenBuilder.Qualifier">
            <summary>
            Gets the qualifier that surrounds a token of this builder.
            </summary>
            <value>The qualifier that surrounds a token of this builder.</value>
        </member>
        <member name="P:Cuemon.Data.TokenBuilder.IsValid">
            <summary>
            Returns a value indicating whether the current state of this builder is valid.
            </summary>
            <value><c>true</c> if the current state of this builder is valid; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Cuemon.Data.TokenBuilder.Append(System.String)">
            <summary>
            Appends the specified value to this builder.
            </summary>
            <param name="value">The value to tokenize.</param>
            <returns>A reference to this instance.</returns>
        </member>
        <member name="M:Cuemon.Data.TokenBuilder.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="T:Cuemon.Data.UniqueIndexViolationException">
            <summary>
            The exception that is thrown when a unique index violation occurs from a data source.
            </summary>
        </member>
        <member name="M:Cuemon.Data.UniqueIndexViolationException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Data.UniqueIndexViolationException"/> class.
            </summary>
        </member>
        <member name="M:Cuemon.Data.UniqueIndexViolationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Data.UniqueIndexViolationException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Cuemon.Data.UniqueIndexViolationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Data.UniqueIndexViolationException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception. If the innerException parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception.</param>
        </member>
        <member name="M:Cuemon.Data.UniqueIndexViolationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Data.UniqueIndexViolationException"/> class.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="T:Cuemon.Data.Xml.XmlDataReader">
            <summary>
            Provides a way of reading a forward-only stream of rows from an XML based data source. This class cannot be inherited.
            </summary>
        </member>
        <member name="M:Cuemon.Data.Xml.XmlDataReader.#ctor(System.Xml.XmlReader,System.Func{System.String,System.Action{Cuemon.FormattingOptions{System.Globalization.CultureInfo}},System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Data.Xml.XmlDataReader"/> class.
            </summary>
            <param name="reader">The <see cref="T:System.Xml.XmlReader"/> object that contains the XML data.</param>
            <param name="parser">The function delegate that returns a primitive object whose value is equivalent to the provided <see cref="T:System.String"/> value. Default is <see cref="M:Cuemon.Text.ParserFactory.FromValueType"/>.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="reader"/> is null.
            </exception>
        </member>
        <member name="P:Cuemon.Data.Xml.XmlDataReader.Depth">
            <summary>
            Gets a value indicating the depth of nesting for the current element.
            </summary>
            <value>The level of nesting.</value>
        </member>
        <member name="P:Cuemon.Data.Xml.XmlDataReader.RowCount">
            <summary>
            Gets the currently processed row count of this instance.
            </summary>
            <value>The currently processed row count of this instance.</value>
            <remarks>This property is incremented when the invoked <see cref="M:Cuemon.Data.Xml.XmlDataReader.Read"/> method returns <c>true</c>.</remarks>
        </member>
        <member name="P:Cuemon.Data.Xml.XmlDataReader.NullRead">
            <summary>
            Gets the value that indicates that no more rows exists.
            </summary>
            <value>The value that indicates that no more rows exists.</value>
        </member>
        <member name="M:Cuemon.Data.Xml.XmlDataReader.Read">
            <summary>
            Advances this instance to the next element of the XML data source.
            </summary>
            <returns><c>true</c> if there are more elements; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ObjectDisposedException">
            This instance has been disposed.
            </exception>
        </member>
        <member name="M:Cuemon.Data.Xml.XmlDataReader.ReadNext(System.Boolean)">
            <summary>
            Advances this instance to the next element of the XML data source.
            </summary>
            <returns><c>true</c> if there are more elements; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ObjectDisposedException">
            This instance has been disposed.
            </exception>
        </member>
        <member name="M:Cuemon.Data.Xml.XmlDataReader.OnDisposeManagedResources">
            <summary>
            Called when this object is being disposed by either <see cref="M:Cuemon.Disposable.Dispose" /> or <see cref="M:Cuemon.Disposable.Dispose(System.Boolean)" /> having <c>disposing</c> set to <c>true</c> and <see cref="P:Cuemon.Disposable.Disposed" /> is <c>false</c>.
            </summary>
        </member>
    </members>
</doc>
